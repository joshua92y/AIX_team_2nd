# LocaAI/config/settings.py
"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from chatbot.rag_settings import RAG_SETTINGS

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# .env 파일 로딩 개선
env_path = BASE_DIR / '.env'
if env_path.exists():
    load_dotenv(env_path)
    print(f"✅ .env 파일 로딩 완료: {env_path}")
else:
    print(f"⚠️  .env 파일을 찾을 수 없습니다: {env_path}")
    # 대안 경로들 시도
    alternative_paths = [
        Path(__file__).resolve().parent / '.env',  # config/.env
        Path(__file__).resolve().parent.parent.parent / '.env',  # 상위 디렉토리
    ]
    for alt_path in alternative_paths:
        if alt_path.exists():
            load_dotenv(alt_path)
            print(f"✅ 대안 .env 파일 로딩 완료: {alt_path}")
            break
    else:
        print("⚠️  .env 파일을 찾을 수 없어 시스템 환경변수만 사용합니다.")

# GeoDjango 설정 - 프로젝트 내장 GDAL 라이브러리 사용
GDAL_LIBS_ROOT = os.path.join(BASE_DIR, 'gdal_libs')

# 🚀 완전 독립적인 GDAL 설정 (환경변수 의존성 제거)
def setup_gdal_libraries():
    """프로젝트 내부 GDAL 라이브러리만 사용하도록 강제 설정"""
    
    if not os.path.exists(GDAL_LIBS_ROOT):
        print(f"[ERROR] GDAL 라이브러리 폴더가 없습니다: {GDAL_LIBS_ROOT}")
        return False
    
    # 라이브러리 파일 직접 경로 설정 (환경변수 조작 없음)
    gdal_dll = os.path.join(GDAL_LIBS_ROOT, 'gdal310.dll')
    geos_dll = os.path.join(GDAL_LIBS_ROOT, 'geos_c.dll') 
    spatialite_dll = os.path.join(GDAL_LIBS_ROOT, 'mod_spatialite.dll')
    
    # 파일 존재 확인
    missing_files = []
    if not os.path.exists(gdal_dll):
        missing_files.append('gdal310.dll')
    if not os.path.exists(geos_dll):
        missing_files.append('geos_c.dll')
    if not os.path.exists(spatialite_dll):
        missing_files.append('mod_spatialite.dll')
    
    if missing_files:
        print(f"[ERROR] 필수 DLL 파일이 없습니다: {missing_files}")
        return False
    
    # Django에서 사용할 라이브러리 경로 직접 설정
    globals()['GDAL_LIBRARY_PATH'] = gdal_dll
    globals()['GEOS_LIBRARY_PATH'] = geos_dll  
    globals()['SPATIALITE_LIBRARY_PATH'] = spatialite_dll
    
    print(f"[OK] 독립 GDAL 라이브러리 설정 완료: {GDAL_LIBS_ROOT}")
    print(f"     └─ GDAL: {os.path.basename(gdal_dll)}")
    print(f"     └─ GEOS: {os.path.basename(geos_dll)}")
    print(f"     └─ SpatiaLite: {os.path.basename(spatialite_dll)}")
    
    return True

# 독립적인 GDAL 라이브러리 설정 실행
if not setup_gdal_libraries():
    print("[FATAL] GDAL 라이브러리 설정에 실패했습니다.")
    print("        프로젝트의 gdal_libs 폴더와 DLL 파일들을 확인해주세요.")
    import sys
    sys.exit(1)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 환경변수 기반 보안 설정 (개선됨)
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-your-secret-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() in ('true', '1', 'yes', 'on')

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')
ASGI_APPLICATION = "config.asgi.application"

# Application definition

INSTALLED_APPS = [
    "rest_framework",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",  # GeoDjango 지원 추가
    "main",  # 메인 웹 디자인 앱
    "border",
    "channels",
    "custom_auth",
    "chatbot",
    "GeoDB",  # 지오메트리 데이터베이스 관리 앱
    "AI_Analyzer",  # AI 상권분석 앱
    "leaflet",  # 지도 기능 (공간정보용)
    "taggit",   # 태그 기능 (복사된 데이터용)
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "AI_Analyzer.context_processors.api_keys",  # 카카오 API 키 context processor 추가
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.spatialite",  # SpatiaLite 엔진으로 변경
        "NAME": BASE_DIR / "db.sqlite3",
        "OPTIONS": {
            "timeout": 60,  # 대용량 공간정보 DB를 위한 타임아웃 설정
            "init_command": "PRAGMA journal_mode=WAL;",  # 동시성 향상
        },
    }
}
AUTH_USER_MODEL = "custom_auth.User"

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Media files
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Login settings
LOGIN_URL = "custom_auth:login"
LOGIN_REDIRECT_URL = "border:inquiry_list"
LOGOUT_REDIRECT_URL = "border:inquiry_list"

# RAG Settings
RAG_SETTINGS = RAG_SETTINGS
# Channels 설정
CHANNEL_LAYERS = {"default": {"BACKEND": "channels.layers.InMemoryChannelLayer"}}

# Leaflet 지도 설정 (AI_Analyzer에서 통합)
LEAFLET_CONFIG = {
    'DEFAULT_CENTER': (37.5665, 126.9780),  # 서울 중심 좌표
    'DEFAULT_ZOOM': 10,
    'MIN_ZOOM': 3,
    'MAX_ZOOM': 18,
    'DEFAULT_PRECISION': 6,
    'TILES': [
        ('OpenStreetMap', 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            'attribution': '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
        }),
    ],
}

# 카카오 API 설정 - .env 파일에서 가져오기
KAKAO_REST_API_KEY = os.getenv('KAKAO_REST_API_KEY')
KAKAO_JS_API_KEY = os.getenv('KAKAO_JS_API_KEY')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
QDRANT_API_KEY = os.getenv('QDRANT_API_KEY')
DATA_API_KEY = os.getenv('DATA_API_KEY')

# API 키 로딩 상태 확인 (개발 환경에서만)
if DEBUG:
    api_keys_status = {
        'KAKAO_REST_API_KEY': bool(KAKAO_REST_API_KEY),
        'KAKAO_JS_API_KEY': bool(KAKAO_JS_API_KEY),
        'OPENAI_API_KEY': bool(OPENAI_API_KEY),
        'QDRANT_API_KEY': bool(QDRANT_API_KEY),
        'DATA_API_KEY': bool(DATA_API_KEY),
    }
    
    print("🔑 API 키 로딩 상태:")
    for key, loaded in api_keys_status.items():
        status = "✅ 로딩됨" if loaded else "❌ 누락"
        print(f"   {key}: {status}")
    
    # 누락된 키가 있으면 경고
    missing_keys = [key for key, loaded in api_keys_status.items() if not loaded]
    if missing_keys:
        print(f"⚠️  누락된 API 키: {', '.join(missing_keys)}")
        print(f"   .env 파일 위치: {BASE_DIR / '.env'}")
        print("   API_KEYS_SETUP.md 파일을 참고하여 API 키를 설정해주세요.")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{levelname}] {asctime} {name}:{lineno} - {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        # Django GIS GDAL 오류 로그 레벨 조정
        "django.contrib.gis": {
            "handlers": ["console"],
            "level": "WARNING",  # ERROR 대신 WARNING으로 설정하여 GDAL 오류 억제
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "DEBUG",  # 개발 시엔 DEBUG, 운영 시엔 WARNING 이상 권장
    },
}
