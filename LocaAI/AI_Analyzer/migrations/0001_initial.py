# Generated by Django 5.2.1 on 2025-06-12 07:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BusinessType",
            fields=[
                ("id", models.IntegerField(primary_key=True, serialize=False)),
                ("name", models.CharField(max_length=50, verbose_name="업종명")),
            ],
            options={
                "verbose_name": "업종",
                "verbose_name_plural": "업종",
                "db_table": "business_type",
            },
        ),
        migrations.CreateModel(
            name="AnalysisRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=200, verbose_name="주소")),
                ("area", models.FloatField(verbose_name="면적(㎡)")),
                (
                    "service_type",
                    models.IntegerField(
                        choices=[(0, "휴게음식점"), (1, "일반음식점")],
                        verbose_name="서비스 유형",
                    ),
                ),
                ("longitude", models.FloatField(verbose_name="경도(WGS84)")),
                ("latitude", models.FloatField(verbose_name="위도(WGS84)")),
                ("x_coord", models.FloatField(verbose_name="X좌표(EPSG:5186)")),
                ("y_coord", models.FloatField(verbose_name="Y좌표(EPSG:5186)")),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="사용자",
                    ),
                ),
                (
                    "business_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="AI_Analyzer.businesstype",
                        verbose_name="업종",
                    ),
                ),
            ],
            options={
                "verbose_name": "분석 요청",
                "verbose_name_plural": "분석 요청",
            },
        ),
        migrations.CreateModel(
            name="AnalysisResult",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "life_pop_300m",
                    models.IntegerField(default=0, verbose_name="300m내 총생활인구"),
                ),
                (
                    "life_pop_20_300m",
                    models.FloatField(default=0, verbose_name="300m내 20대 비율(%)"),
                ),
                (
                    "life_pop_30_300m",
                    models.FloatField(default=0, verbose_name="300m내 30대 비율(%)"),
                ),
                (
                    "life_pop_40_300m",
                    models.FloatField(default=0, verbose_name="300m내 40대 비율(%)"),
                ),
                (
                    "life_pop_50_300m",
                    models.FloatField(default=0, verbose_name="300m내 50대 비율(%)"),
                ),
                (
                    "life_pop_60_300m",
                    models.FloatField(default=0, verbose_name="300m내 60대 비율(%)"),
                ),
                (
                    "life_pop_20_1000m",
                    models.FloatField(default=0, verbose_name="1000m내 20대 비율(%)"),
                ),
                (
                    "life_pop_30_1000m",
                    models.FloatField(default=0, verbose_name="1000m내 30대 비율(%)"),
                ),
                (
                    "life_pop_40_1000m",
                    models.FloatField(default=0, verbose_name="1000m내 40대 비율(%)"),
                ),
                (
                    "life_pop_50_1000m",
                    models.FloatField(default=0, verbose_name="1000m내 50대 비율(%)"),
                ),
                (
                    "life_pop_60_1000m",
                    models.FloatField(default=0, verbose_name="1000m내 60대 비율(%)"),
                ),
                (
                    "temp_foreign_1000m",
                    models.IntegerField(
                        default=0, verbose_name="1000m내 단기체류외국인"
                    ),
                ),
                (
                    "temp_foreign_cn_300m",
                    models.FloatField(
                        default=0, verbose_name="300m내 단기체류 중국인 비율(%)"
                    ),
                ),
                (
                    "temp_foreign_cn_1000m",
                    models.FloatField(
                        default=0, verbose_name="1000m내 단기체류 중국인 비율(%)"
                    ),
                ),
                (
                    "long_foreign_300m",
                    models.IntegerField(
                        default=0, verbose_name="300m내 장기체류외국인"
                    ),
                ),
                (
                    "long_foreign_1000m",
                    models.IntegerField(
                        default=0, verbose_name="1000m내 장기체류외국인"
                    ),
                ),
                (
                    "long_foreign_cn_1000m",
                    models.FloatField(
                        default=0, verbose_name="1000m내 장기체류 중국인 비율(%)"
                    ),
                ),
                (
                    "working_pop_300m",
                    models.IntegerField(default=0, verbose_name="300m내 직장인구"),
                ),
                (
                    "public_building_250m",
                    models.IntegerField(default=0, verbose_name="250m내 공공건물 수"),
                ),
                (
                    "school_250m",
                    models.IntegerField(default=0, verbose_name="250m내 학교 수"),
                ),
                (
                    "competitor_300m",
                    models.IntegerField(
                        default=0, verbose_name="300m내 동일업종 경쟁업체 수"
                    ),
                ),
                (
                    "adjacent_biz_300m",
                    models.IntegerField(
                        default=0, verbose_name="300m내 전체 요식업체 수"
                    ),
                ),
                (
                    "competitor_ratio_300m",
                    models.FloatField(
                        default=0, verbose_name="300m내 경쟁업체 비율(%)"
                    ),
                ),
                (
                    "business_diversity_300m",
                    models.IntegerField(default=0, verbose_name="300m내 업종 다양성"),
                ),
                ("area", models.FloatField(default=0, verbose_name="면적(㎡)")),
                (
                    "service_type",
                    models.IntegerField(default=0, verbose_name="서비스 유형"),
                ),
                (
                    "total_land_value",
                    models.FloatField(default=0, verbose_name="총 공시지가"),
                ),
                (
                    "survival_probability",
                    models.FloatField(default=0, verbose_name="생존 확률 (0-1)"),
                ),
                (
                    "survival_percentage",
                    models.FloatField(default=0, verbose_name="생존 확률 (%)"),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "request",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="AI_Analyzer.analysisrequest",
                        verbose_name="분석 요청",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="사용자",
                    ),
                ),
            ],
            options={
                "verbose_name": "분석 결과",
                "verbose_name_plural": "분석 결과",
            },
        ),
    ]
